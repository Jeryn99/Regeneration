buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.architectury.dev/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.matthewprenger.cursegradle"


version = '36.0.5'
group = 'mc.craig.software.regen' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = '[1.16] Regeneration'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            arg "-mixin.config=regen.mixins.json"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            ideaModule "${project.name}.main"

            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }


            mods {
                regen {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                regen {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'regen', '--all', '--output', file('src/generated/resources/')

            mods {
                regen {
                    source sourceSets.main
                }
            }
        }
    }
}

curseforge {
    if (project.hasProperty('curseforge') && project.hasProperty('regen')) {

        apiKey = rootProject.curseforge
        project {
            id = rootProject.regen
            changelog = new File("${project.projectDir}/changelog.html").text
            releaseType = 'release'
            changelogType = 'html'
            addGameVersion '1.16.3'
            addGameVersion '1.16.4'
            addGameVersion '1.16.5'
            mainArtifact(jar) {
                displayName = "[1.16.x] Regeneration -  $project.version"
            }
        }
    }
}

repositories {
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://maven.blamejared.com/" }
    maven { url "https://www.cursemaven.com" }
    maven { url 'https://jitpack.io' }
    mavenCentral()
}


dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    minecraft "net.minecraftforge:forge:${forge_version}"
    compileOnly 'org.jetbrains:annotations:22.0.0'
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    implementation fg.deobf("curse.maven:configured-457570:3244520")
    implementation fg.deobf("curse.maven:terraforged-363820:3451426")
    implementation fg.deobf("curse.maven:jei-238222:3519343")
    implementation fg.deobf('com.gitlab.mistersecret312:TardisMod:1.5.5-beta')
}


////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

mixin {
    add sourceSets.main, "regen.refmap.json"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "regen",
                "Specification-Vendor"    : "suff99",
                "Specification-Version"   : "${version}", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "suff99",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "regen.mixins.json"
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}