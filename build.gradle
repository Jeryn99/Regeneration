plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3.+" apply false
    id "com.github.breadmoirai.github-release" version "2.4.1"
}


def forgeDir = new File(project.projectDir, 'forge/build/libs/')
def fabricDir = new File(project.projectDir, 'fabric/build/libs/')
def commonDir = new File(project.projectDir, 'common/build/libs/')

// Ensure directories exist
[forgeDir, fabricDir, commonDir].each { dir ->
    if (!dir.exists()) {
        dir.mkdirs()
    }
}

def filter = { File file -> file.getName().contains(mod_version) } as FileFilter

def forgeFiles = forgeDir.listFiles(filter)
def fabricFiles = fabricDir.listFiles(filter)
def commonFiles = commonDir.listFiles(filter)

githubRelease {
    token project.findProperty("github") ?: System.getenv("github") ?: ""
    owner "Jeryn99"
    repo "Regeneration"
    tagName "v$rootProject.minecraft_version-$project.mod_version"
    targetCommitish "architectury/1.20.1"
    releaseName "[$rootProject.minecraft_version] Regeneration - v$project.mod_version"
    generateReleaseNotes true
    body new File("${rootProject.projectDir}/changelog.html").text
    draft false
    prerelease false
    releaseAssets(forgeFiles + fabricFiles + commonFiles)
    allowUploadToExisting.set false
    overwrite true
    dryRun false
    apiEndpoint "https://api.github.com"
    client
}




architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

     dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.mappings}")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = "Regeneration-v${rootProject.minecraft_version}-${rootProject.mod_version}-${project.name}"
    version = rootProject.mod_version
    group = rootProject.maven_group

  repositories {
      maven {
          url = 'https://maven.parchmentmc.net/'
          content {
              includeGroup 'org.parchmentmc.data'
          }
      }

      maven {
          url = 'https://jitpack.io'
      }

      maven {
          url = 'https://www.cursemaven.com'
          content {
              includeGroup 'curse.maven'
          }
      }

      maven {
          url = 'https://maven.terraformersmc.com/releases/'
      }

      maven {
          url = 'https://maven.shedaniel.me'
      }

      maven {
          url = 'https://dvs1.progwml6.com/files/maven/'
      }

      maven {
          name = 'Ladysnake Mods'
          url = 'https://maven.ladysnake.org/releases'
      }

      maven {
          url = 'https://maven.theillusivec4.top/'
      }

      maven {
          name = 'TerraformersMC'
          url = 'https://maven.terraformersmc.com/'
      }

      maven { url "https://maven.neoforged.net/releases/" }

      maven {
          // saps.dev Maven (KubeJS and Rhino)
          url = 'https://maven.saps.dev/minecraft'
          content {
              includeGroup 'dev.latvian.mods'
          }
      }

      maven {
          name = "Fuzs Mod Resources"
          url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
      }

      flatDir {
          dirs '../libs'
      }

      maven {
          name = "Fuzs Mod Resources"
          url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
      }

  }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

task publishMeEverywhere(){
    dependsOn ':forge:publishUnified'
    dependsOn ':fabric:publishUnified'
}

